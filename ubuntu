#!/bin/bash

# Configuration
IMAGE_NAME="ubuntu-custom"
CONTAINER_NAME="ubuntu_runs"
VOLUME_NAME="ubuntu_data"
USER_NAME="aaron"

# Check Docker
if ! docker info &> /dev/null; then
    echo "Docker is not running. Please start Docker first."
    exit 1
fi

# Create custom image
if ! docker image inspect "$IMAGE_NAME" &> /dev/null; then
    echo -e "\n[${INFO}INFO${RESET}] Creating custom image with user '$USER_NAME'..."
    
    # Create and configure temporary container
    docker run -d --name temp_container ubuntu:latest sleep infinity
    
    # Added error checking for critical steps
    if ! docker exec temp_container bash -c "\
        apt-get update -qq && \
        apt-get install -yq sudo && \
        useradd -m -s /bin/bash $USER_NAME && \
        usermod -aG sudo $USER_NAME && \
        echo '$USER_NAME ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/$USER_NAME && \
        chmod 0440 /etc/sudoers.d/$USER_NAME"; then
        
        echo "Failed to configure container! Cleaning up..."
        docker rm -f temp_container
        exit 1
    fi

    docker commit temp_container "$IMAGE_NAME"
    docker rm -f temp_container &> /dev/null
fi

# Volume management
if ! docker volume inspect "$VOLUME_NAME" &> /dev/null; then
    echo -e "\n[${INFO}INFO${RESET}] Creating volume '$VOLUME_NAME'..."
    docker volume create "$VOLUME_NAME"
fi

# Container management (force recreation if needed)
if docker inspect "$CONTAINER_NAME" &> /dev/null; then
    CURRENT_IMAGE=$(docker inspect --format '{{.Config.Image}}' "$CONTAINER_NAME")
    if [[ "$CURRENT_IMAGE" != "$IMAGE_NAME" ]]; then
        echo -e "\n[${INFO}INFO${RESET}] Removing old container..."
        docker rm -f "$CONTAINER_NAME" &> /dev/null
    fi
fi

if ! docker inspect "$CONTAINER_NAME" &> /dev/null; then
    echo -e "\n[${INFO}INFO${RESET}] Creating new container '$CONTAINER_NAME'..."
    docker run -itd \
        --name "$CONTAINER_NAME" \
        --hostname test-runs \
        -v "$VOLUME_NAME:/data" \
        "$IMAGE_NAME"
elif [ "$(docker inspect -f '{{.State.Running}}' "$CONTAINER_NAME")" != "true" ]; then
    echo -e "\n[${INFO}INFO${RESET}] Starting existing container..."
    docker start "$CONTAINER_NAME" > /dev/null
fi

# User entry
echo -e "\n[${INFO}INFO${RESET}] Jumping into Ubuntu (hostname: test-runs)"
echo -e "[${INFO}INFO${RESET}] To exit: Type 'exit' or press ${INFO}Ctrl+D${RESET}\n"

docker exec -it \
    --user "$USER_NAME" \
    --workdir "/home/$USER_NAME" \
    "$CONTAINER_NAME" bash