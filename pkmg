#!/bin/zsh

# Homebrew
echo
echo HOMEBREW
echo "========================================="
command -v brew &> /dev/null && echo "Homebrew (brew) is installed" || echo "Homebrew (brew) is NOT installed"
echo

echo 'Installed by Brew (including dependencies)'
echo "-----------------------------------------"
brew list
echo
echo 'Installed by Brew (exluding dependencies)'
echo "-----------------------------------------"
brew leaves
echo

# Go
echo
echo GO
echo "========================================="
command -v go &> /dev/null && echo "go is installed" || echo "go is NOT installed"
echo

# Node.js
echo
echo NODE
echo "========================================="
command -v npm &> /dev/null && echo "npm is installed" || echo "npm is NOT installed"
command -v yarn &> /dev/null && echo "yarn is installed" || echo "yarn is NOT installed"
command -v pnpm &> /dev/null && echo "pnpm is installed" || echo "pnpm is NOT installed"
echo


echo "Installed by NPM"
echo "-----------------------------------------"
npm list -g
echo

# Python (Focus on Python 3)
echo
echo PYTHON3
echo "========================================="
command -v pip3 &> /dev/null && echo "pip3 is installed" || echo "pip3 is NOT installed"
echo

python3.12 -m pip --version 2>/dev/null | grep pip && echo "pip (for Python 3.12) is installed" || echo "pip (for Python 3.12) is NOT installed"
echo

# Python Framework
echo
echo "Python Framework (3.12):"
echo "========================================="
ls /Library/Frameworks/Python.framework/Versions/3.12/bin 2>/dev/null # List Python 3.12 executables
echo

# List pip3 installed packages (as before)
echo
echo "pip3 installed packages:"
echo "-----------------------------------------"
pip3 list --format=columns | tail -n +3  # Skip header rows

# Check for and list virtual environments and their packages
echo
echo ""
echo "Virtual Environments:"
echo "-----------------------------------------"

# Function to list packages in a virtual environment (improved)
list_venv_packages() {
  local venv_path="$1"
  local venv_name=$(basename "$venv_path")

  if [[ -d "$venv_path" ]]; then
    echo "  $venv_name:"

    # Use a subshell to isolate environment changes
    (  # Start a subshell
      if [[ -f "$venv_path/bin/activate" ]]; then
          source "$venv_path/bin/activate" > /dev/null 2>&1
      elif [[ -f "$venv_path/Scripts/activate" ]]; then # Windows
          source "$venv_path/Scripts/activate" > /dev/null 2>&1
      elif [[ -f "$venv_path/Activate.ps1" ]]; then # Windows Powershell
          . "$venv_path/Activate.ps1" > /dev/null 2>&1
      else
          echo "    Error: Could not activate $venv_name"
          return 1
      fi

      pip list --format=columns | tail -n +3 | sed 's/^/    /'
    ) # End the subshell

  else
    echo "    Error: $venv_path is not a valid directory."
    return 1
  fi
  return 0
}

echo "Currently not calling the virtual environments function because I don't know where to point it to look for vm envs"
# Find virtual environments (example: looking in common locations)
# for venv_dir in ~/.venvs/* /path/to/other/venvs/*; do # Add more locations as needed
#   if [[ -d "$venv_dir" ]]; then # Check if the directory exists
#     list_venv_packages "$venv_dir" # This is the function call!
#   fi
# done

echo
echo 'Installed by pipx'
echo "-----------------------------------------"
pipx list
echo

# Java (sdkman!)
echo
echo JAVA
echo "========================================="

# Find sdkman! installation directory (handle potential custom locations)
SDKMAN_DIR="${SDKMAN_DIR:-$HOME/.sdkman}"

# Check if sdkman! is installed
if [ -d "$SDKMAN_DIR" ]; then
  echo "sdkman! installation directory: $SDKMAN_DIR"

  # Source the sdkman! setup script
  source "${SDKMAN_DIR}/bin/sdkman-init.sh" || { echo "Error: Could not source sdkman! setup script"; exit 1; }

  # Get the current Java version (if any)
  echo
  echo "running command: 'sdk current java'"
  echo "-----------------------------------------"
  sdk current java
  echo
  echo "running command: 'sdk list java'"
  sdk list java | grep -v " \* " | grep -v "Available"

  # List installed Java versions (non-interactive, filtered)
  echo
  echo "Installed Java versions:"
  echo "-----------------------------------------"

  sdk list java | grep "installed" | awk '{print $3}' # Extract the Version

  # List local only Java versions (non-interactive, filtered)
  echo
  echo "Local Only Java versions:"
  echo "-----------------------------------------"

   sdk list java | grep "local only" | awk '{print $3}' # Extract the Version

else
  echo "sdkman! is NOT installed"
fi

# Apache Maven
echo
echo MAVEN
echo "========================================="
if [ -d /opt/apache-maven-3.9.9 ]; then # Or adjust path
  echo "Apache Maven is installed at /opt/apache-maven-3.9.9" # Or adjust path
  /opt/apache-maven-3.9.9/bin/mvn --version # Or adjust path
else
  echo "Apache Maven is NOT installed"
fi
echo

# User-specific executables
echo
echo "User-specific executables (~/.local/bin):"
echo "========================================="
ls ~/.local/bin 2>/dev/null # List the contents of ~/.local/bin
echo

# TeX
echo
echo TeX
echo "========================================="
if [ -d /Library/TeX/texbin ]; then
  echo "TeX is installed"
  ls /Library/TeX/texbin 2>/dev/null
else
  echo "TeX is NOT installed"
fi
echo

echo TeX
echo "========================================="
# Check for TeX Live or MacTeX (tlmgr)
if command -v tlmgr >/dev/null 2>&1; then
  echo "TeX Live/MacTeX is installed (tlmgr found)."
else
  echo "TeX Live/MacTeX is NOT installed (tlmgr not found)."
fi


# All CLI's
echo
echo "All CLI's"
echo "========================================="
CLI_TOOLS=("ng" "vue" "create-react-app" "git" "docker" "kubectl" "aws" "vim" "nano" "code" "brew" "node" "python3" "java" "mvn" "gradle" "terraform" "ansible" "gcloud" "az")
for tool in "${CLI_TOOLS[@]}"; do
  if command -v "$tool" >/dev/null 2>&1; then
    echo "$tool (global): $(command -v "$tool")"
  else
    echo "$tool (global): NOT found"
  fi
done
echo

# Plugins Managers
echo
echo "Plugin Managers:"
echo "========================================="
# packer.nvim
if [ -d ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]; then
  echo "packer.nvim is installed"
else
  echo "packer.nvim is NOT installed"
fi

# lazy.nvim
if [ -d ~/.local/share/nvim/site/pack/lazy/start/lazy.nvim ]; then
  echo "lazy.nvim is installed"
else
  echo "lazy.nvim is NOT installed"
fi
echo

# Gui Apps
echo
echo "GUI Applications"
echo "========================================="
echo "running command: 'ls /Applications"
echo "-----------------------------------------"
ls /Applications
echo
echo "running command: 'ls ~/Applications"
echo "-----------------------------------------"
ls ~/Applications
echo