#!/bin/bash

# ... (Existing code for colors, wrap width, etc.)

# Function to check if a file or directory should be excluded based on .gitignore
function is_excluded_by_gitignore() {
    local item="$1"
    local gitignore_dir="$2"  # Directory containing .gitignore

    if [[ -f "$gitignore_dir/.gitignore" ]]; then
        # Check if the item is *inside* the Git repo
        if git ls-files --error-unmatch "$item" > /dev/null 2>&1; then # Item is tracked

          # Use git check-ignore to see if the file is ignored ONLY if it's tracked
          if git check-ignore -q "$item" > /dev/null 2>&1; then  # Suppress output
              return 0  # Excluded
          fi
        else # Item is untracked, check if it's explicitly excluded
          local base_name=$(basename "$item")
          # Read .gitignore file and check for matches (simpler, but less robust)
          while IFS= read -r line; do
            # Skip comments and empty lines
            if [[ ! "$line" =~ ^(#|$) ]]; then
              # Basic pattern matching (you might need more sophisticated matching)
              if [[ "$base_name" == "$line" ]]; then
                return 0  # Excluded
              fi
            fi
          done < "$gitignore_dir/.gitignore"
        fi
    fi
    return 1  # Not excluded
}

# Function to check if a file or directory should be excluded
function is_excluded() {
    local item="$1"
    local base_name=$(basename "$item")

    # Check against directory names
    for dir in "${EXCLUDE_DIRS[@]}"; do
        if [[ "$base_name" == "$dir" ]]; then
            return 0  # Excluded
        fi
    done

    # Check against file extensions
    if [[ -f "$item" ]]; then # Only check extension for files
      local ext="${item##*.}";  # Extract file extension
      for ex in "${EXCLUDE_EXTENSIONS[@]}"; do
          if [[ "$ext" == "$ex" ]]; then
              return 0  # Excluded
          fi
      done
    fi

    return 1  # Not excluded
}


# Function to print directory tree
function print_tree() {
    local path="$1"
    local indent="$2"
    local last="$3"  # Flag for whether this is the last item in the directory

    # Check for .gitignore in the current directory
    local has_gitignore=0
    if [[ -f "$path/.gitignore" ]]; then
        has_gitignore=1
    fi


    # Get the contents of the directory
    local items=("$path"/*)
    local count=${#items[@]} # Count of items in the directory

    # Loop through the contents of the directory
    for i in "${!items[@]}"; do
        local item="${items[$i]}"
        local is_last=$((i == count - 1)) # Check if this is the last item

        if [[ $has_gitignore -eq 1 ]]; then
            if is_excluded_by_gitignore "$item" "$path"; then
                continue  # Skip this item
            fi
        fi

        if is_excluded "$item"; then
          continue # Skip this item
        fi


        if [ -d "$item" ]; then
            # It's a directory, print its name
            if [ $is_last -eq 1 ]; then
                printf "${indent}${COLOR_DIR}└── %s${COLOR_RESET}\n" "$(basename "$item")"
                print_tree "$item" "${indent}    " 1
            else
                printf "${indent}${COLOR_DIR}├── %s${COLOR_RESET}\n" "$(basename "$item")"
                print_tree "$item" "${indent}│   " 0
            fi
        elif [ -f "$item" ]; then
            # It's a file, print its name
            if [ $is_last -eq 1 ]; then
                printf "${indent}${COLOR_FILE}└── %s${COLOR_RESET}\n" "$(basename "$item")"
            else
                printf "${indent}${COLOR_FILE}├── %s${COLOR_RESET}\n" "$(basename "$item")"
            fi

            # Display file content with bat (only for non-excluded files)
            local full_indent="${indent}    "
            local wrap_width=$(( WRAP_WIDTH - ${#full_indent} ))
            bat --color=always --style=plain --paging=never --line-range 1:50 --wrap=auto "$item" | sed "s/^/${full_indent}/"
            printf "\n"
        fi
    done
}

# Start from the current directory
print_tree "." "" 0
printf "\n"