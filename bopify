#!/bin/bash

# Configuration
MUSIC_DIR=~/Music/4K\ YouTube\ to\ MP3
SUPPORTED_EXTS=("mp3" "wav" "aiff" "m4a" "aac" "flac")
CONTROL_PIPE="/tmp/music_player_control"
CURRENT_PID=""

check_dependencies() {
    if ! command -v mpv &> /dev/null; then
        echo "Error: mpv is required but not installed."
        echo "Install with: brew install mpv"
        exit 1
    fi
}

cleanup() {
    [ -p "$CONTROL_PIPE" ] && rm -f "$CONTROL_PIPE"
    if [ -n "$CURRENT_PID" ] && kill -0 "$CURRENT_PID" 2>/dev/null; then
        kill "$CURRENT_PID" 2>/dev/null
    fi
    echo -ne "\r\033[K"
}

trap cleanup EXIT

get_duration() {
    local file="$1"
    
    # Try ffprobe first
    if command -v ffprobe &> /dev/null; then
        duration=$(ffprobe -v error -show_entries format=duration \
            -of default=noprint_wrappers=1:nokey=1 "$file" 2>/dev/null)
        echo "${duration%.*}"
        return
    fi
    
    # MPV fallback
    duration=$(mpv --no-video --ao=null --frames=0 --quiet \
        --term-status-msg='%${duration}' "$file" 2>&1 | \
        awk -F '=' '/ANS_LENGTH/ {print $2}')
    echo "${duration%.*}"
}

draw_progress() {
    local duration=$1 elapsed=$2
    local width=30

    if [ "$duration" -le 0 ]; then
        printf "\r\033[K[No duration info] %02d:%02d" \
            $((elapsed/60)) $((elapsed%60))
        return
    fi

    local percent=$((elapsed * 100 / duration))
    local filled=$((width * percent / 100))
    
    printf "\r["
    printf "%${filled}s" | tr ' ' 'â–ˆ'
    printf "%$((width - filled))s" | tr ' ' ' '
    printf "] %d%% %02d:%02d/%02d:%02d" $percent \
        $((elapsed/60)) $((elapsed%60)) \
        $((duration/60)) $((duration%60))
}

play_sound() {
    cleanup
    mkfifo "$CONTROL_PIPE" 2>/dev/null
    local file="$1"
    
    # Get duration
    duration=$(get_duration "$file")
    if ! [[ "$duration" =~ ^[0-9]+$ ]] || [ "$duration" -le 0 ]; then
        echo -e "\n\033[1;33mWarning: Could not detect duration\033[0m"
        duration=0
    fi

    # Start MPV with IPC socket
    mpv --no-video --input-ipc-server="$CONTROL_PIPE" --quiet "$file" &
    CURRENT_PID=$!
    
    # Wait for IPC socket creation
    while [ ! -S "$CONTROL_PIPE" ]; do sleep 0.1; done
    
    local start_time=$(date +%s)
    local elapsed=0 paused=0  # Use numeric (0/1) instead of boolean

    while kill -0 "$CURRENT_PID" 2>/dev/null; do
        if (( !paused )); then
            elapsed=$(( $(date +%s) - start_time ))
            (( duration > 0 && elapsed > duration )) && elapsed=$duration
        fi
        
        draw_progress "$duration" "$elapsed"
        
        if read -r -t 1 -n 1 key; then
            case "$key" in
                q) echo '{ "command": ["quit"] }' | socat - "$CONTROL_PIPE"; break ;;
                p) 
                    paused=$((!paused))
                    echo '{ "command": ["set_property", "pause", '$paused'] }' | socat - "$CONTROL_PIPE"
                    ;;
                \>) echo '{ "command": ["seek", 5, "relative"] }' | socat - "$CONTROL_PIPE" ;;
                \<) echo '{ "command": ["seek", -5, "relative"] }' | socat - "$CONTROL_PIPE" ;;
                m) echo '{ "command": ["cycle", "mute"] }' | socat - "$CONTROL_PIPE" ;;
            esac
        fi
    done
    
    wait
    echo -e "\n\n\033[1;32mPlayback finished\033[0m"
    sleep 1
}

# Detect supported files
declare -a songs
list_songs() {
    songs=()
    while IFS= read -r -d $'\0' file; do
        songs+=("$file")
    done < <(find "$MUSIC_DIR" -type f \( -name "*.${SUPPORTED_EXTS[0]}" \
        $(printf -- "-o -name *.%s " "${SUPPORTED_EXTS[@]:1}") \) -print0)
}

# Interactive menu
show_menu() {
    clear
    echo -e "\033[1;36m=== Music Player ===\033[0m"
    echo -e "\033[1mAvailable Songs:\033[0m"
    
    for i in "${!songs[@]}"; do
        printf "\033[1;33m%3d)\033[0m %s\n" $((i+1)) "$(basename "${songs[$i]}")"
    done
    
    echo -e "\n\033[1;35m[$((${#songs[@]}+1))] Refresh list"
    echo -e "[0]  Quit\033[0m"
    echo -e "\n\033[1;32mControls during playback:"
    echo -e "  [q] Stop and quit"
    echo -e "  [p] Pause/Resume"
    echo -e "  [>] Seek +5s"
    echo -e "  [<] Seek -5s"
    echo -e "  [m] Mute/Unmute\033[0m"
    echo -ne "\n\033[1;32mSelect song (0-$((${#songs[@]}+1))): \033[0m"
}

# Main loop
main_loop() {
    while true; do
        list_songs
        if [ ${#songs[@]} -eq 0 ]; then
            echo -e "\033[1;31mNo supported audio files found in $MUSIC_DIR!\033[0m"
            exit 1
        fi
        
        while true; do
            show_menu
            read -r -n 2 choice
            clear
            
            if [[ $choice =~ ^[0-9]+$ ]]; then
                if [ "$choice" -eq 0 ]; then
                    cleanup
                    exit 0
                elif [ "$choice" -le "${#songs[@]}" ]; then
                    play_sound "${songs[$((choice-1))]}"
                    break
                elif [ "$choice" -eq "$((${#songs[@]}+1))" ]; then
                    break
                else
                    echo -e "\033[1;31mInvalid selection!\033[0m"
                    sleep 1
                fi
            else
                echo -e "\033[1;31mPlease enter a number!\033[0m"
                sleep 1
            fi
        done
    done
}

check_dependencies
trap cleanup EXIT
main_loop