#!/bin/bash

# Check for clean-me.md and generate if missing
if [[ ! -f "clean-me.md" ]]; then
  echo -e "[${INFO}INFO${RESET}] clean-me.md not found - generating..."
  if command -v pkgs &> /dev/null; then
    pkgs .
    if [[ ! -f "clean-me.md" ]]; then
      echo -e "[${ERROR}ERROR${RESET}] Failed to generate clean-me.md!"
      exit 1
    fi
    echo -e "[${SUCCESS}SUCCESS${RESET}] Generated clean-me.md"
  else
    echo -e "[${ERROR}ERROR${RESET}] 'pkgs' command not found!"
    exit 1
  fi
fi

# Read the markdown file and execute commands
current_dir=$(pwd)
project_dir=""
in_command_block=0

while IFS= read -r line; do
  # Detect project header
  if [[ "$line" =~ ^###.*(Project: (.+)) ]]; then
    project_dir="${BASH_REMATCH[2]}"
    echo -e "[${INFO}INFO${RESET}] Entering project directory: $project_dir"
    cd "$project_dir" || { echo -e "[${ERROR}ERROR${RESET}] Failed to enter $project_dir"; exit 1; }
  
  # Detect start of command block
  elif [[ "$line" == '```bash' ]]; then
    in_command_block=1
    echo -e "[${INFO}INFO${RESET}] Found commands to execute:"
  
  # Detect end of command block
  elif [[ "$line" == '```' && $in_command_block -eq 1 ]]; then
    in_command_block=0
    echo -e "[${SUCCESS}SUCCESS${RESET}] Finished executing commands"
    cd "$current_dir" || { echo -e "[${ERROR}ERROR${RESET}] Failed to return to root directory"; exit 1; }
    echo -e "[${INFO}INFO${RESET}] Returned to root directory"
    echo ""
  
  # Execute commands within block
  elif [[ $in_command_block -eq 1 ]]; then
    echo -en "[${INFO}INFO${RESET}] Executing: "
    echo "$line"
    eval "$line" || { echo -e "[${ERROR}ERROR${RESET}] Command failed"; exit 1; }
  fi
done < clean-me.md

echo -e "[${SUCCESS}SUCCESS${RESET}] All cleanup commands processed successfully!"